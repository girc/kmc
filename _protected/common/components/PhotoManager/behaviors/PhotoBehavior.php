<?php

namespace common\components\PhotoManager\behaviors;


use common\models\Photo;

class PhotoBehaviorWidget extends \yii\base\Behavior
{
    /**
     * @var ActiveRecord the owner of this behavior
     * @example $owner = Post where Post is the ActiveRecord with GalleryBehavior attached under public function behaviors()
     */
    public $owner;
    /**
     * Path to directory where to save uploaded images
     * @var string
     */
    public $directory;

    /**
     * Directory Url, without trailing slash
     * @var string
     */
    public $url;

    /**
     * Directory Route, without trailing slash
     * example: for www.site.com/app/uploads/images/gallery/123/8/small.jpg
     * /uploads/images/gallery will be the route
     * It is to be used to generate Url Dynamically using @see \yii\helpers\Url
     * $this->url = Url::to([$this->routeToBaseDir]);
     *          OR
     * For static function use
     * $url = GalleryBehavior::getUrlStatic('/uploads/images/gallery'); that returns Url::to('/uploads/images/gallery');
     * The idea is to save the relative route in database
     * @var string
     */
    public $route;

    /**
     * name of query param for modification time hash
     * to avoid using outdated version from cache - set it to false
     * @var string
     */
    public $timeHash = '_';

    /**
     * Used by GalleryManager
     * @var bool
     * @see GalleryManager::run
     */
    public $hasName = true;

    public $modelClass='common\models\Photo';

    /**
     * @var string Table name for saving gallery images meta information
     */
    public $tableName;// = '{{%photo}}';

    /**
     * @param ActiveRecord $owner
     */
    public function attach($owner)
    {
        parent::attach($owner);
    }

    public function events()
    {
        return [
            ActiveRecord::EVENT_BEFORE_DELETE => 'beforeDelete',
            ActiveRecord::EVENT_AFTER_INSERT =>'afterSave',
            ActiveRecord::EVENT_AFTER_UPDATE => 'afterUpdate',
            ActiveRecord::EVENT_AFTER_FIND => 'afterFind',
        ];
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        // check for required parameter
        if(!$this->modelClass){
            throw new Exception('invalid configuration : modelClass must be set');
        }

        if(!$this->url && $this->route ){
            $this->url = Url::to([$this->route]);
        }

        $this->tableName=(new $this->modelClass)->tableName();
    }

    protected $_images = [];

    /**
     * @return GalleryImage[]
     */
    public function getImages()
    {
        if (empty($this->_images)) {
            $imagesData=$this->getImagesData();
            foreach ($imagesData as $imageData) {
                $this->_images[] = new Photo($this, $imageData);
            }
        }
        return $this->_images;
    }
}